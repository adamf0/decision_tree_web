{"ast":null,"code":"var _jsxFileName = \"/Users/adamf/Documents/design_web/decision_tree_web/frontend/src/Page/TreeNode.jsx\";\n// components/TreeNode.js\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TreeNode = ({\n  node\n}) => {\n  if (typeof node === 'string') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ml-4 border-l-2 pl-2 text-green-600\",\n      children: [\"\\u2192 \", node]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ml-4 border-l-2 pl-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"font-semibold text-red-700\",\n      children: node.attribute\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ml-4\",\n      children: Object.entries(node.branches).map(([branchValue, branchData], idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm text-gray-700\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"font-medium text-indigo-600\",\n            children: branchValue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 15\n          }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-gray-500\",\n            children: [\"(Entropy: \", branchData.entropy, \", Gini: \", branchData.gini, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TreeNode, {\n          node: branchData.node\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 13\n        }, this)]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n_c = TreeNode;\nexport default TreeNode;\nvar _c;\n$RefreshReg$(_c, \"TreeNode\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","TreeNode","node","className","children","fileName","_jsxFileName","lineNumber","columnNumber","attribute","Object","entries","branches","map","branchValue","branchData","idx","entropy","gini","_c","$RefreshReg$"],"sources":["/Users/adamf/Documents/design_web/decision_tree_web/frontend/src/Page/TreeNode.jsx"],"sourcesContent":["// components/TreeNode.js\nimport React from 'react';\n\nconst TreeNode = ({ node }) => {\n  if (typeof node === 'string') {\n    return <div className=\"ml-4 border-l-2 pl-2 text-green-600\">â†’ {node}</div>;\n  }\n\n  return (\n    <div className=\"ml-4 border-l-2 pl-2\">\n      <div className=\"font-semibold text-red-700\">{node.attribute}</div>\n      <div className=\"ml-4\">\n        {Object.entries(node.branches).map(([branchValue, branchData], idx) => (\n          <div key={idx} className=\"mb-2\">\n            <div className=\"text-sm text-gray-700\">\n              <span className=\"font-medium text-indigo-600\">{branchValue}</span>{' '}\n              <span className=\"text-xs text-gray-500\">\n                (Entropy: {branchData.entropy}, Gini: {branchData.gini})\n              </span>\n            </div>\n            <TreeNode node={branchData.node} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TreeNode;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAC7B,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,oBAAOF,OAAA;MAAKG,SAAS,EAAC,qCAAqC;MAAAC,QAAA,GAAC,SAAE,EAACF,IAAI;IAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAC5E;EAEA,oBACER,OAAA;IAAKG,SAAS,EAAC,sBAAsB;IAAAC,QAAA,gBACnCJ,OAAA;MAAKG,SAAS,EAAC,4BAA4B;MAAAC,QAAA,EAAEF,IAAI,CAACO;IAAS;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAClER,OAAA;MAAKG,SAAS,EAAC,MAAM;MAAAC,QAAA,EAClBM,MAAM,CAACC,OAAO,CAACT,IAAI,CAACU,QAAQ,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,WAAW,EAAEC,UAAU,CAAC,EAAEC,GAAG,kBAChEhB,OAAA;QAAeG,SAAS,EAAC,MAAM;QAAAC,QAAA,gBAC7BJ,OAAA;UAAKG,SAAS,EAAC,uBAAuB;UAAAC,QAAA,gBACpCJ,OAAA;YAAMG,SAAS,EAAC,6BAA6B;YAAAC,QAAA,EAAEU;UAAW;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,EAAC,GAAG,eACtER,OAAA;YAAMG,SAAS,EAAC,uBAAuB;YAAAC,QAAA,GAAC,YAC5B,EAACW,UAAU,CAACE,OAAO,EAAC,UAAQ,EAACF,UAAU,CAACG,IAAI,EAAC,GACzD;UAAA;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ,CAAC,eACNR,OAAA,CAACC,QAAQ;UAACC,IAAI,EAAEa,UAAU,CAACb;QAAK;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA,GAP3BQ,GAAG;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQR,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACW,EAAA,GAvBIlB,QAAQ;AAyBd,eAAeA,QAAQ;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}